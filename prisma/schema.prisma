// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  HACKATHON
  IDEATHON
  STARTUPVERSE
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentItemState {
  PROCESSING
  FAILED
  APPROVED
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role Role @default(USER)

  accounts Account[]
  sessions Session[]

  // if this is false, pester the user to fill the form
  hasFilledInfo Boolean @default(false)

  // make this true after scanning QR code at gate
  arrivedOnsite Boolean @default(false)

  university   String?
  fieldOfStudy String?
  yearOfStudy  String?
  mobileNumber String?
  gender       Gender?
  teamId       String?
  team         Team?          @relation(fields: [teamId], references: [id])
  teamLeader   Boolean        @default(false)
  Accomodation Accomodation[]
  TravelItem   TravelItem[]
  EventReg     EventReg[]
  PaymentItem  PaymentItem[]
  UserPayment  UserPayment[]

  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailReg {
  id    Int    @id @default(autoincrement())
  email String
}

model Event {
  id       String     @id @default(cuid())
  // event type either 2 day or 3 day enum
  amount   Int
  name     String
  Team     Team[]
  EventReg EventReg[]
}

model EventReg {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  paymentId String
  payment   PaymentItem @relation(fields: [paymentId], references: [id])

  quantity Int @default(1)

  @@index([userId])
  @@index([eventId])
  @@index([paymentId])
}

// create a payment model for paytm gateway
// This is for the ticket ONLY
model PaymentItem {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount Int

  userPaymentId String
  userPayment   UserPayment @relation(fields: [userPaymentId], references: [id])

  state        PaymentItemState
  Accomodation Accomodation[]
  TravelItem   TravelItem[]
  EventReg     EventReg[]

  @@index([userId])
  @@index([userPaymentId])
}

// This is for the event payments ONLY 

model UserPayment {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  upi         String
  url         String
  PaymentItem PaymentItem[]

  @@index([userId])
}

model Team {
  id      String @id @default(cuid())
  name    String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  User    User[]

  @@index([eventId])
}

model Travel {
  id                   String       @id @default(cuid())
  destination          String
  amount               Int
  departureDateAndTime DateTime
  travelItem           TravelItem[]
}

model TravelItem {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  travel   Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId String

  payment       PaymentItem @relation(fields: [paymentItemId], references: [id])
  paymentItemId String

  @@index([userId])
  @@index([travelId])
  @@index([paymentItemId])
}

model Cluster {
  id           String         @id @default(cuid())
  name         String
  beds         Int
  accomodation Accomodation[]
  gender       Gender
}

model Accomodation {
  id String @id @default(cuid())

  cluster   Cluster @relation(fields: [clusterId], references: [id])
  clusterId String

  checkInDate  DateTime
  checkOutDate DateTime

  checkedIn  Boolean @default(false)
  checkedOut Boolean @default(false)

  payment   PaymentItem @relation(fields: [paymentId], references: [id])
  paymentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([clusterId])
  @@index([paymentId])
  @@index([userId])
}

// Role user or admin
